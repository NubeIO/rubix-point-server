"""empty message

Revision ID: 0d49c71ddb03
Revises: 
Create Date: 2021-05-17 11:43:05.425502

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = '0d49c71ddb03'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('networks',
                    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.Column('name', sa.String(length=80), nullable=False),
                    sa.Column('enable', sa.Boolean(), nullable=False),
                    sa.Column('fault', sa.Boolean(), nullable=True),
                    sa.Column('history_enable', sa.Boolean(), nullable=False),
                    sa.Column('tags', sa.String(length=320), nullable=True),
                    sa.Column('driver', sa.Enum('MODBUS', 'GENERIC', name='drivers'), nullable=True),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('name'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('schedules',
                    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.Column('name', sa.String(length=80), nullable=False),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('name'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('devices',
                    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.Column('network_uuid', sa.String(), nullable=False),
                    sa.Column('name', sa.String(length=80), nullable=False),
                    sa.Column('enable', sa.Boolean(), nullable=False),
                    sa.Column('fault', sa.Boolean(), nullable=True),
                    sa.Column('history_enable', sa.Boolean(), nullable=False),
                    sa.Column('tags', sa.String(length=320), nullable=True),
                    sa.Column('driver', sa.Enum('MODBUS', 'GENERIC', name='drivers'), nullable=True),
                    sa.ForeignKeyConstraint(['network_uuid'], ['networks.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('name', 'network_uuid')
                    )
    op.create_table('generic_networks',
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.ForeignKeyConstraint(['uuid'], ['networks.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid')
                    )
    op.create_table('modbus_networks',
                    sa.Column('rtu_port', sa.String(length=80), nullable=True),
                    sa.Column('rtu_speed', sa.Integer(), nullable=True),
                    sa.Column('rtu_stop_bits', sa.Integer(), nullable=True),
                    sa.Column('rtu_parity', sa.Enum('O', 'E', 'N', 'Odd', 'Even', name='modbusrtuparity'),
                              nullable=True),
                    sa.Column('rtu_byte_size', sa.Integer(), nullable=True),
                    sa.Column('tcp_ip', sa.String(length=80), nullable=True),
                    sa.Column('tcp_port', sa.Integer(), nullable=True),
                    sa.Column('type', sa.Enum('RTU', 'TCP', name='modbustype'), nullable=False),
                    sa.Column('timeout', sa.Integer(), nullable=False),
                    sa.Column('polling_interval_runtime', sa.Integer(), nullable=True),
                    sa.Column('point_interval_ms_between_points', sa.Integer(), nullable=True),
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.ForeignKeyConstraint(['uuid'], ['networks.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('rtu_port'),
                    sa.UniqueConstraint('rtu_port'),
                    sa.UniqueConstraint('tcp_ip', 'tcp_port')
                    )
    op.create_table('generic_devices',
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.ForeignKeyConstraint(['uuid'], ['devices.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid')
                    )
    op.create_table('modbus_devices',
                    sa.Column('type', sa.Enum('RTU', 'TCP', name='modbustype'), nullable=False),
                    sa.Column('address', sa.Integer(), nullable=False),
                    sa.Column('zero_based', sa.Boolean(), nullable=False),
                    sa.Column('ping_point', sa.String(length=10), nullable=True),
                    sa.Column('supports_multiple_rw', sa.Boolean(), nullable=False),
                    sa.Column('modbus_network_uuid_constraint', sa.String(), nullable=False),
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.ForeignKeyConstraint(['uuid'], ['devices.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('address', 'modbus_network_uuid_constraint')
                    )
    op.create_table('points',
                    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.Column('name', sa.String(length=80), nullable=False),
                    sa.Column('device_uuid', sa.String(), nullable=False),
                    sa.Column('enable', sa.Boolean(), nullable=False),
                    sa.Column('history_enable', sa.Boolean(), nullable=False),
                    sa.Column('history_type', sa.Enum('COV', 'INTERVAL', 'COV_AND_INTERVAL', name='historytype'),
                              nullable=False),
                    sa.Column('history_interval', sa.Integer(), nullable=False),
                    sa.Column('writable', sa.Boolean(), nullable=False),
                    sa.Column('cov_threshold', sa.Float(), nullable=False),
                    sa.Column('value_round', sa.Integer(), nullable=False),
                    sa.Column('value_operation', sa.String(), nullable=True),
                    sa.Column('input_min', sa.Float(), nullable=True),
                    sa.Column('input_max', sa.Float(), nullable=True),
                    sa.Column('scale_min', sa.Float(), nullable=True),
                    sa.Column('scale_max', sa.Float(), nullable=True),
                    sa.Column('tags', sa.String(length=320), nullable=True),
                    sa.Column('driver', sa.Enum('MODBUS', 'GENERIC', name='drivers'), nullable=True),
                    sa.ForeignKeyConstraint(['device_uuid'], ['devices.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('name', 'device_uuid')
                    )
    op.create_table('generic_points',
                    sa.Column('disable_mqtt', sa.Boolean(), nullable=False),
                    sa.Column('type', sa.Enum('INT', 'FLOAT', 'STRING', 'BOOL', name='genericpointtype'),
                              nullable=False),
                    sa.Column('unit', sa.String(), nullable=True),
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.ForeignKeyConstraint(['uuid'], ['points.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid')
                    )
    op.create_table('modbus_points',
                    sa.Column('register', sa.Integer(), nullable=False),
                    sa.Column('register_length', sa.Integer(), nullable=False),
                    sa.Column('function_code', sa.Enum('READ_COILS', 'READ_DISCRETE_INPUTS', 'READ_HOLDING_REGISTERS',
                                                       'READ_INPUT_REGISTERS', 'WRITE_COIL', 'WRITE_REGISTER',
                                                       'WRITE_COILS', 'WRITE_REGISTERS', name='modbusfunctioncode'),
                              nullable=False),
                    sa.Column('data_type',
                              sa.Enum('RAW', 'INT16', 'UINT16', 'INT32', 'UINT32', 'FLOAT', 'DOUBLE', 'DIGITAL',
                                      name='modbusdatatype'), nullable=False),
                    sa.Column('data_endian',
                              sa.Enum('LEB_BEW', 'LEB_LEW', 'BEB_LEW', 'BEB_BEW', name='modbusdataendian'),
                              nullable=False),
                    sa.Column('modbus_device_uuid_constraint', sa.String(), nullable=False),
                    sa.Column('write_value_once', sa.Boolean(), nullable=False),
                    sa.Column('uuid', sa.String(length=80), nullable=False),
                    sa.ForeignKeyConstraint(['uuid'], ['points.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('register', 'function_code', 'modbus_device_uuid_constraint')
                    )
    op.create_table('point_stores',
                    sa.Column('value', sa.Float(), nullable=True),
                    sa.Column('value_original', sa.Float(), nullable=True),
                    sa.Column('value_raw', sa.String(), nullable=True),
                    sa.Column('fault', sa.Boolean(), nullable=False),
                    sa.Column('fault_message', sa.String(), nullable=True),
                    sa.Column('ts_value', sa.DateTime(), nullable=True),
                    sa.Column('ts_fault', sa.DateTime(), nullable=True),
                    sa.Column('point_uuid', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['point_uuid'], ['points.uuid'], ),
                    sa.PrimaryKeyConstraint('point_uuid')
                    )
    op.create_table('point_stores_history',
                    sa.Column('value', sa.Float(), nullable=True),
                    sa.Column('value_original', sa.Float(), nullable=True),
                    sa.Column('value_raw', sa.String(), nullable=True),
                    sa.Column('fault', sa.Boolean(), nullable=False),
                    sa.Column('fault_message', sa.String(), nullable=True),
                    sa.Column('ts_value', sa.DateTime(), nullable=True),
                    sa.Column('ts_fault', sa.DateTime(), nullable=True),
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('point_uuid', sa.String(), nullable=False),
                    sa.ForeignKeyConstraint(['point_uuid'], ['points.uuid'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('priority_array',
                    sa.Column('point_uuid', sa.String(), nullable=False),
                    sa.Column('_1', sa.Float(), nullable=True),
                    sa.Column('_2', sa.Float(), nullable=True),
                    sa.Column('_3', sa.Float(), nullable=True),
                    sa.Column('_4', sa.Float(), nullable=True),
                    sa.Column('_5', sa.Float(), nullable=True),
                    sa.Column('_6', sa.Float(), nullable=True),
                    sa.Column('_7', sa.Float(), nullable=True),
                    sa.Column('_8', sa.Float(), nullable=True),
                    sa.Column('_9', sa.Float(), nullable=True),
                    sa.Column('_10', sa.Float(), nullable=True),
                    sa.Column('_11', sa.Float(), nullable=True),
                    sa.Column('_12', sa.Float(), nullable=True),
                    sa.Column('_13', sa.Float(), nullable=True),
                    sa.Column('_14', sa.Float(), nullable=True),
                    sa.Column('_15', sa.Float(), nullable=True),
                    sa.Column('_16', sa.Float(), nullable=True),
                    sa.ForeignKeyConstraint(['point_uuid'], ['points.uuid'], ),
                    sa.PrimaryKeyConstraint('point_uuid')
                    )
    op.create_table('mappings_mp_gbp',
                    sa.Column('created_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'),
                              nullable=True),
                    sa.Column('uuid', sa.String(), nullable=False),
                    sa.Column('modbus_point_uuid', sa.String(), nullable=False),
                    sa.Column('generic_point_uuid', sa.String(length=80), nullable=True),
                    sa.Column('bacnet_point_uuid', sa.String(length=80), nullable=True),
                    sa.Column('modbus_point_name', sa.String(length=80), nullable=False),
                    sa.Column('generic_point_name', sa.String(length=80), nullable=True),
                    sa.Column('bacnet_point_name', sa.String(length=80), nullable=True),
                    sa.ForeignKeyConstraint(['modbus_point_uuid'], ['modbus_points.uuid'], ),
                    sa.PrimaryKeyConstraint('uuid'),
                    sa.UniqueConstraint('bacnet_point_uuid'),
                    sa.UniqueConstraint('bacnet_point_uuid'),
                    sa.UniqueConstraint('generic_point_uuid'),
                    sa.UniqueConstraint('generic_point_uuid')
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('mappings_mp_gbp')
    op.drop_table('priority_array')
    op.drop_table('point_stores_history')
    op.drop_table('point_stores')
    op.drop_table('modbus_points')
    op.drop_table('generic_points')
    op.drop_table('points')
    op.drop_table('modbus_devices')
    op.drop_table('generic_devices')
    op.drop_table('modbus_networks')
    op.drop_table('generic_networks')
    op.drop_table('devices')
    op.drop_table('schedules')
    op.drop_table('networks')
    # ### end Alembic commands ###
